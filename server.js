const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    },
    transports: ['websocket', 'polling']
});
const path = require('path');

// ุชุญุฏูุฏ ุงููููุฐ - ูููู ุชุบููุฑู ุญุณุจ ุฅุนุฏุงุฏุงุช cPanel
const PORT = process.env.PORT || 3000;

// ุชุณุฌูู ูุนูููุงุช ุงูุจุฏุงูุฉ
console.log('๐ ุฌุงุฑู ุชุดุบูู ุงูุฎุงุฏู...');
console.log('๐ ุงููุฌูุฏ ุงูุญุงูู:', __dirname);
console.log('๐ง ุงูุจูุฆุฉ:', process.env.NODE_ENV || 'development');

// ุฎุฏูุฉ ุงููููุงุช ุงูุซุงุจุชุฉ
app.use(express.static('public'));

// ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ุตูุญุฉ ุงูุงุฎุชุจุงุฑ (ููุชุญูู ูู ุนูู ุงูุฎุงุฏู)
app.get('/test', (req, res) => {
    res.sendFile(path.join(__dirname, 'test.html'));
});

// API ููุชุญูู ูู ุญุงูุฉ ุงูุฎุงุฏู
app.get('/api/status', (req, res) => {
    res.json({
        status: 'running',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        activeRooms: rooms.size,
        activeUsers: users.size,
        nodeVersion: process.version,
        platform: process.platform
    });
});

// ุชุฎุฒูู ุงููุณุชุฎุฏููู ุงููุชุตููู
const users = new Map();
const rooms = new Map();

io.on('connection', (socket) => {
    console.log('ูุณุชุฎุฏู ุฌุฏูุฏ ูุชุตู:', socket.id);

    // ุงูุงูุถูุงู ุฅูู ุงูุบุฑูุฉ
    socket.on('join-room', (roomId, username) => {
        console.log(`${username} ููุถู ุฅูู ุงูุบุฑูุฉ ${roomId}`);
        
        // ุฅุถุงูุฉ ุงููุณุชุฎุฏู ุฅูู ุงูุบุฑูุฉ
        socket.join(roomId);
        
        // ุญูุธ ูุนูููุงุช ุงููุณุชุฎุฏู
        users.set(socket.id, { username, roomId });
        
        // ุชุญุฏูุซ ูุงุฆูุฉ ุงููุณุชุฎุฏููู ูู ุงูุบุฑูุฉ
        if (!rooms.has(roomId)) {
            rooms.set(roomId, new Set());
        }
        rooms.get(roomId).add(socket.id);
        
        // ุฅุฎุจุงุฑ ุงููุณุชุฎุฏููู ุงูุขุฎุฑูู ูู ุงูุบุฑูุฉ
        socket.to(roomId).emit('user-connected', {
            userId: socket.id,
            username: username
        });
        
        // ุฅุฑุณุงู ูุงุฆูุฉ ุงููุณุชุฎุฏููู ุงูุญุงูููู ูููุณุชุฎุฏู ุงูุฌุฏูุฏ
        const roomUsers = Array.from(rooms.get(roomId))
            .filter(id => id !== socket.id)
            .map(id => ({
                userId: id,
                username: users.get(id)?.username || 'ูุฌููู'
            }));
        
        socket.emit('existing-users', roomUsers);
        
        // ุฅุฑุณุงู ุชุญุฏูุซ ุนุฏุฏ ุงููุณุชุฎุฏููู
        updateUserCount(roomId);
    });

    // ุฅุดุงุฑุงุช WebRTC
    socket.on('offer', (data) => {
        socket.to(data.target).emit('offer', {
            offer: data.offer,
            sender: socket.id,
            username: users.get(socket.id)?.username
        });
    });

    socket.on('answer', (data) => {
        socket.to(data.target).emit('answer', {
            answer: data.answer,
            sender: socket.id
        });
    });

    socket.on('ice-candidate', (data) => {
        socket.to(data.target).emit('ice-candidate', {
            candidate: data.candidate,
            sender: socket.id
        });
    });

    // ูุชู/ุฅูุบุงุก ูุชู ุงูุตูุช
    socket.on('toggle-mute', (isMuted) => {
        const user = users.get(socket.id);
        if (user) {
            socket.to(user.roomId).emit('user-muted', {
                userId: socket.id,
                isMuted: isMuted
            });
        }
    });

    // ูุทุน ุงูุงุชุตุงู
    socket.on('disconnect', () => {
        console.log('ูุณุชุฎุฏู ูุทุน ุงูุงุชุตุงู:', socket.id);
        
        const user = users.get(socket.id);
        if (user) {
            const { roomId, username } = user;
            
            // ุฅุฒุงูุฉ ุงููุณุชุฎุฏู ูู ุงูุบุฑูุฉ
            if (rooms.has(roomId)) {
                rooms.get(roomId).delete(socket.id);
                
                // ุญุฐู ุงูุบุฑูุฉ ุฅุฐุง ูุงูุช ูุงุฑุบุฉ
                if (rooms.get(roomId).size === 0) {
                    rooms.delete(roomId);
                } else {
                    // ุฅุฎุจุงุฑ ุงููุณุชุฎุฏููู ุงูุขุฎุฑูู
                    socket.to(roomId).emit('user-disconnected', {
                        userId: socket.id,
                        username: username
                    });
                    
                    updateUserCount(roomId);
                }
            }
            
            users.delete(socket.id);
        }
    });

    // ุชุญุฏูุซ ุนุฏุฏ ุงููุณุชุฎุฏููู ูู ุงูุบุฑูุฉ
    function updateUserCount(roomId) {
        const count = rooms.get(roomId)?.size || 0;
        io.to(roomId).emit('user-count', count);
    }
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุบูุฑ ุงููุชููุนุฉ
process.on('uncaughtException', (error) => {
    console.error('โ ุฎุทุฃ ุบูุฑ ูุชููุน:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('โ ูุนุฏ ูุฑููุถ:', error);
});

// ุชุดุบูู ุงูุฎุงุฏู
const server = http.listen(PORT, () => {
    console.log('โ ุงูุฎุงุฏู ูุนูู ุจูุฌุงุญ!');
    console.log(`๐ก ุงููููุฐ: ${PORT}`);
    console.log(`๐ ุงูุฑุงุจุท ุงููุญูู: http://localhost:${PORT}`);
    console.log('โฐ ุงูููุช:', new Date().toLocaleString('ar-SA'));
    console.log('๐ ูู ุงูุชุธุงุฑ ุงูุงุชุตุงูุงุช...\n');
});

// ูุนุงูุฌุฉ ุฅุบูุงู ุงูุฎุงุฏู ุจุดูู ุตุญูุญ
process.on('SIGTERM', () => {
    console.log('๐ ุฅููุงู ุงูุฎุงุฏู...');
    server.close(() => {
        console.log('โ ุชู ุฅููุงู ุงูุฎุงุฏู ุจูุฌุงุญ');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('\n๐ ุฅููุงู ุงูุฎุงุฏู...');
    server.close(() => {
        console.log('โ ุชู ุฅููุงู ุงูุฎุงุฏู ุจูุฌุงุญ');
        process.exit(0);
    });
});

